// portfolio-stateless-lambda.cpp : This file contains the 'main' function. Program execution begins and ends there.
#include <iostream>
#include <string>
#include <vector>
#include <functional>
#include <algorithm>

class Person {
    friend std::ostream& operator<<(std::ostream& os, const Person& p);
private:
    std::string name;
    int age{};
public:
    Person(std::string name, int age = 0) : name(name), age(age) {};
    Person(const Person &p) : name{p.name}, age{p.age} {}
    ~Person() = default;
    std::string get_name() const { return name; }
    void set_name(std::string name) { this-> name = name; }
    int get_age() const { return age; }
    void set_age(int age) { this->age = age; }
};

std::ostream& operator<< (std::ostream& os, const Person& p) {
    os << p.name << ": " << p.age << " ";
    return os;
}

void test1() {
    std::cout << "\nTest1=============================" << std::endl;
    std::string hello{ "Hello" };
    []() {std::cout << "Hi I'm a Lambda expression." << std::endl; }();
    [](std::string s) {std::cout << s << std::endl; }(hello);
    [](int x) { std::cout << x << std::endl; } (100);
    [](int x) { std::cout << x * x << std::endl; }(33);
    [](int x, int y) {std::cout << x + y << std::endl; } (100, 200);
}

void test2() {
    std::cout << "\nTest2===============================" << std::endl;
    auto l1 = []() {std::cout << "Hello I'm a lambda expression." << std::endl; };
    l1();
    int num1{ 100 };
    int num2{ 200 };
    auto l2 = [](int x, int y) { std::cout << x + y << std::endl; };
    l2(10, 20);
    std::cout << "Num1: " << num1 << ", Num2: " << num2 << std::endl;
    auto l3 = [](int& x, int y) {
        std::cout << "X: " << x << " Y: " << y << std::endl;
        x = 1000;
        y = 2000;
    };
    l3(num1, num2);
    std::cout << "Num1: " << num1 << ", Num2: " << num2 << std::endl;
    auto l4 = [](int& x, int &y) {
        std::cout << "X: " << x << " Y: " << y << std::endl;
        x = 1000;
        y = 2000;
    };
    l4(num1, num2);
    std::cout << "Num1: " << num1 << ", Num2: " << num2 << std::endl;
}

void test3() {
    std::cout << "\nTest3==============================" << std::endl;
    Person account_1{ "Jenny", 19 };
    Person account_2{"Elizabeth", 21};
    std::cout << "Class Object:" << std::endl;
    std::cout << account_1 << std::endl;

    auto l4 = [](Person p) {
        std::cout << "Lambda cout:" << std::endl;
        std::cout << p << std::endl;
    };
    l4(account_1);

    auto l5 = [](const Person& p) {
        std::cout << "Lambda by reference:" << std::endl;
        std::cout << p << std::endl;
    };
    l5(account_1);
      auto l6 = [](Person& p) {
        p.set_name("Gabriel");
        p.set_age(33);
        std::cout << p << std::endl;
    };
    l6 (account_1);
    auto l7 = [](Person& p) {
        p.set_name("Jennifer");
        p.set_age(35);
        std::cout << p << std::endl;
    };
    l7(account_2);
}

//using std::function as parameter in C++14 or
//auto as parameter in type in C++20
void filter_vector(const std::vector<int>& vec, std::function<bool(int)> func) {
    std::cout << "[";
    for (int i : vec) {
        if (func(i))
            std::cout << i << " ";
    }
    std::cout << "]" << std::endl;
}

void test4() {
    std::cout << "\nTest4=============================" << std::endl;
    std::vector <int> nums{ 10,20,30,40,50,60,70,80,90,100 };
    
    filter_vector(nums, [](int x) {return x > 50; });
    filter_vector(nums, [](int x) {return x < 50; });
    filter_vector(nums, [](int x) {return x <= 30; });
    filter_vector(nums, [](int x) {return x <= 50; });
    filter_vector(nums, [](int x) {return x >= 30 && x <= 60; });
    filter_vector(nums, [](int x) {return x <= 50 && x >= 30; });
    filter_vector(nums, [](int x) {return x < 50 && x >30; });
}

auto make_lambda() {
    return []() {std::cout << "This lambda was made using the make_lambda function." << std::endl; };
}

void test5() {
    std::cout << "\nTest5=============================" << std::endl;
    auto l5 = make_lambda();
    l5();
}

void test6() {
    std::cout << "\nTest6=============================" << std::endl;
    auto l6 = [](auto x, auto y) {
        std::cout << "X: " << x << " Y: " << y << std::endl;
    };
    l6(10, 20);
    l6(100.3, 200);
    l6(12.5, 15.54);
    l6(Person{ "Jennifer", 22 }, Person{ "Gabriel", 33 });
    auto l6_1 = [](auto x, auto y, auto z) {
        std::cout << "X: " << x << " Y: " << y << " Z: " << z << std::endl;
    };
    l6_1(Person("Jenny", 19), Person("Elizabeth", 21), Person("Gabriel", 33));
}

void test7() {
    std::cout << "\nTest7=============================" << std::endl;
    std::vector<Person> accounts{
        {"Jenny", 19},
        {"Elizabeth", 21},
        {"Gabriel", 33}
    };

    std::cout << "\nBefore sort names alphabetically." << std::endl;
    std::for_each(begin(accounts), end(accounts), [](const Person& p) {
        std::cout << p << std::endl;
        });
     std::sort(begin(accounts), end(accounts), [](const Person& p1, const Person& p2){
        return p1.get_name() < p2.get_name();
     });
     std::cout << "\nAfter sort names alphabetically." << std::endl;
     std::for_each(begin(accounts), end(accounts), [](const Person& p) {
        std::cout << p << std::endl;
        });
}

int main()
{
    test1();
    test2();
    test3();
    test4();
    test5();
    test6();
    test7();
    return 0;
}
