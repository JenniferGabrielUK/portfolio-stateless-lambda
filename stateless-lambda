// portfolio-stateless-lambda.cpp : This file contains the 'main' function. Program execution begins and ends there.
#include <iostream>
#include <string>
#include <vector>
#include <functional>
#include <algorithm>

class Person {
    friend std::ostream& operator<<(std::ostream& os, const Person& p);
private:
    std::string name;
    int age{};
public:
    Person(std::string name, int age = 0) : name(name), age(age) {};
    Person(const Person &p) : name{p.name}, age{p.age} {}
    ~Person() = default;
    std::string get_name() const { return name; }
    void set_name(std::string name) { this-> name = name; }
    int get_age() const { return age; }
    void set_age(int age) { this->age = age; }
};

std::ostream& operator<< (std::ostream& os, const Person& p) {
    os << p.name << ": " << p.age << " ";
    return os;
}

void test1() {
    std::cout << "\nTest1=============================" << std::endl;
    std::string hello{ "Hello" };
    []() {std::cout << "Hi I'm a Lambda expression." << std::endl; }();
    [](std::string s) {std::cout << s << std::endl; }(hello);
    [](int x) { std::cout << x << std::endl; } (100);
    [](int x) { std::cout << x * x << std::endl; }(33);
    [](int x, int y) {std::cout << x + y << std::endl; } (100, 200);
}

void test2() {
    std::cout << "\nTest2===============================" << std::endl;
    auto l1 = []() {std::cout << "Hello I'm a lambda expression." << std::endl; };
    l1();
    int num1{ 100 };
    int num2{ 200 };
    auto l2 = [](int x, int y) { std::cout << x + y << std::endl; };
    l2(10, 20);
    std::cout << "Num1: " << num1 << ", Num2: " << num2 << std::endl;
    auto l3 = [](int& x, int y) {
        std::cout << "X: " << x << " Y: " << y << std::endl;
        x = 1000;
        y = 2000;
    };
    l3(num1, num2);
    std::cout << "Num1: " << num1 << ", Num2: " << num2 << std::endl;
    auto l4 = [](int& x, int &y) {
        std::cout << "X: " << x << " Y: " << y << std::endl;
        x = 1000;
        y = 2000;
    };
    l4(num1, num2);
    std::cout << "Num1: " << num1 << ", Num2: " << num2 << std::endl;
}

int main()
{
    test1();
    test2();
    return 0;
}
